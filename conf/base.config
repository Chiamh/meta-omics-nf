/*
========================================================================================
    nf-core Nextflow base config file
========================================================================================
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
	
	This file DOES NOT contain any cluster specific configs.
----------------------------------------------------------------------------------------
*/

process {
//generic
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 6.h  * task.attempt, 'time'   ) }
//the common exit status of 140 indicates that a process failed due to exceeding 
//memory, disk, CPU, or time constraints (for SGE or SLURM clusters)
    errorStrategy = { task.exitStatus in [140,143,137,104,134,139] ? 'ignore' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    withLabel:process_small {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 6.h   * task.attempt, 'time'    ) }
        errorStrategy = 'ignore'
    }
    withLabel:process_medium {
        cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
        errorStrategy = 'ignore'
    }
    withLabel:process_high {
        cpus   = { check_max( 32    * task.attempt, 'cpus'    ) }
        memory = { check_max( 60.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
        errorStrategy = 'ignore'
    }
    withLabel:process_highmem {
        cpus   = { check_max( 32    * task.attempt, 'cpus'    ) }
        memory = { check_max( 96.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h  * task.attempt, 'time'    ) }
        errorStrategy = 'ignore'
    }
    
}
